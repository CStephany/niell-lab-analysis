Clustering Spikes Offline Notes as of 2 Feb 2011:

This folder contains the ica and spike clustering program written by Cris Niell 
and the superstructure used to run it in batch mode without user intervention 
after starting from a DOS command file.  
The procedure is to invoke matlab from the DOS command line to run each set of blocks, 
and then to exit matlab so that it gives up all its memory, and then to invoke matlab again 
for the next set of blocks.

In the example below, the Tank name is adrec107_102610, and it is located D:\data\TDT.  
This tank contains blocks 1-51, and the blocks at each site at 1-7, 8-14, 15-21, 22-28, 29-37, 38-44, 45-51.  
The block names are adrec107-N where N is the number of the block.  
The analysis files are placed into a folder named adrec107-analysis also located in D:\data\TDT.  
Before starting the program, I created a separate subfolder for each set of analysis files is in its separate folder called Blocks1-7, Blocks 8-14, etc,
so their full names are D:\data\TDT\adrec107-analysis\Blocks1-7 , etc.
The user is assumed to be megumi, who gives her name to the matlab source file directory.

To do unattended clustering, bring up a Command Window (aka DOS box, usually listed in Accessories) or by using Run cmd from the Windows TaskBar, 
change directory into the folder containing the matlab files (usually C:\Documents and Settings\stryker\My Documents\MATLAB\megumi, or some other
folder in the Matlab search path) and the batch file (adrec107.bat in this example) and type the name of the batch file:
adrec107 (in this example)

The contents of the batch file adrec107 is as follows:
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_1_7 -logfile log_107_1_7.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_8_14 -logfile log_107_8_14.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_15_21 -logfile log_107_15_21.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_22_28 -logfile log_107_22_28.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_29_37 -logfile log_107_29_37.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_38_44 -logfile log_107_38_44.txt
START /wait matlab -nodesktop -nospalsh -wait -r cluster_adrec107_45_51 -logfile log_107_45_51.txt

The 7 matlab .m files referred to in the batch file (without their .m suffix) are similar to
cluster_adrec107_45_51.m, containing the following lines:
%%% sample script to call cluster_tetrode_cmd
memory
tank = 'adrec107_102610';
blocks = {'adrec107-45' 'adrec107-46' 'adrec107-47' 'adrec107-48' 'adrec107-49' 'adrec107-50' 'adrec107-51' }
select_ica = 'n';
subtract_mean = 'y';
n_ica = 8;
max_snips = 50000;
basename = '1-7';
output_path = 'D:\data\TDT\adrec107-analysis\Blocks45-51';
disp_figs = 'n';
cluster_tetrode_cmd(tank,blocks,select_ica,subtract_mean,n_ica,max_snips, basename,output_path, disp_figs);
memory
exit

AFter the batch file above has finished, 7 logfiles entitled log_107_45_51.txt etc are created, 
which show what would have appeared on the normal matlab command window if you had executed the program from the command line.

Each invocation of Matlab seems to get the same large maximum array size of about 1.2 Gbytes, making the analysis work fine with as many as 50000 spike events.

The program assumes 
(1) that the matlab programs in FastICA_25 are in the search path.
(2) that the TDT Tank containing the data is registered (using the TankMOn program that is a part of TDT's OpenEX).
(3) that Klustakwik_amd.exe and cygwin1.dll are both on the root folder of the C:\ drive 
	(as specified in line 334 of cluseter_tetrode_cmd.m:   tic; dos('C:\KlustaKwik_amd pca 1 -MinClusters 5 -MaxClusters 10 -MaxPossibleClusters 12 -Verbose 0 -nStarts 2','-echo'); toc)
	This location could be changed, if one changes that line in the Matlab code.
	
These clusters are then used with human intervention by the slect_units.m program also written by Cris Niell 
to select which clusters are single units and should be analyzed.  
(Two nearly identical versions included adjusted for different screen sizes select_units_mk.m and select_units_pc15.m)
The selection of single units from among the clusters is governed by their apparent separation and 
by the response histograms showing reasonable spike rates and their having no or few short interspike intervals.

Notes from Cris on the new version of cluster_tetrode emailed from Cris 26Jan2011:

I've modified the version I sent out yesterday so that you can run
multiple clusterings sequentially from a script. This version is
called cluster_tetrode_cmd. You can either use it just like before, by
calling cluster_tetrode_cmd and then answering the questions, or using
a script to set the different variables. I've also attached a sample
script showing how to set everything up.
Cris
> > Improvements  ...
> > 1) Option to use only a subset of snippets for calculating ICA (saves memory)
> > 2) Option to subtract off common mode (mean across 4 channels)
> > 3) Option to use all  ICA components (so you don't need to manually select)
> > 4) Better commenting (somewhat) and some old cruft removed
> > Together, these options should prevent most memory crashes and
> > alleviate the need to interact with the program continuously. You just
> > enter some info at the beginning, then save it at the end.
> >
> > Cris
> >


--Michael Stryker, 2Feb2011
	
	
----------------------------------
Blow are partially obsolete notes on how to sue an earlier version of Cris's code:

Spike cluster analysis, Cris's code
Notes by Michael Stryker 19 Jan 2011

What is needed to be installed:  

TDT OpenEx Suite (code Dragonfly) to get TankMon.exe
I also loaded the TDT Drivers and the ActiveX Controls from http://tdt.com/downloads.htm, but I don't think that they are necessary.

Analysis code, includes cluster_tetrode.m (or cluster_tetrode1.m?) and calls FastICA and some other modules--I'm not sure which.  I will try to figure this out.

We are using the FastICA_25 version.

Klustakwik_amd.exe and Cygwin.dll in c:\
I will change the code to put them in C:\bin at some future time.

Running Cluster_tetrode

Step 1.  Register the Tank that you want to analyze (which is like a folder containing separate files for the blocks using TankMon.  The asterisk shows that the tank is registered.

Edit the use_tets variable (line normally commented out) in cluster_tetrode if necessary (ie, if there are too many spikes otherwise). AFter the first time, comment out the use_tets again so that it tries other tetrodes.

Create a folder withe the same name as the beginning of the Tank + '-analysis' for the analysis files.  It will sit next to Tank in alphabetical order.

In general, it is good to cluster all the blocks taht will be compared against one another (left eye, right eye, etc) in a single run for cluster_tetrode, but that may cause too many spikes.

Run cluster_tetrode

The first time, you can not re-cluster, so answer 'no' at the 'Re-cluster?' prompt.

Select the blocks to be analyzed in the dialog box.  Right now you can only select one block at a time (future change to multiple-block selection), and it keeps asking for more until you hit 'cancel' on the uigetfile dialog box.

Select the ICA waveforms to be used for the spike clustering by clicking.  Then hit 'enter' after all decent loking components are selected.

Klustakwik then runs for ~6 minutes.

Save the data in a file with a name like sweeps or something; this name will be appended to the Tank+blocks name.

If you do additional tetrodes from the same blocks, reply 'yes' to 'Re-cluster?' and then tell which tets to use (eg [2 3 4]).
When it comes time to save the data, select the same data file as above.

Running Select_units

After cluster_tetrode exits, use the clusters to select spikes by running select_units.m (or select_units_mk.m).

Look for the clusters that have reasonable spike waveforms and reasonable numbers of spike in the histograms and inter-spike-interval distributions that are reasonable, not cut off artifactually at 1 msec.  Select the cluster by clicking its color (background color of the plots).

Running spike analysis programs

Example of spike analysis program is drift_orientfreq_basic.m
This reads that analysis file for a particular block.


 